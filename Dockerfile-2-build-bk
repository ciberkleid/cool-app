# syntax=docker/dockerfile:experimental

# Sample command
#   docker run -p 8081:8081 -e "JAVA_OPTS=-Ddebug -Xmx128m" cool-app --server.port=8081
# Sample build commands
#   docker build . -t cool-app -f Dockerfile-2-build-bk
#   Or, to use a .m2 repo in the build context:
#   ./mvnw -Dmaven.repo.local=./.m2/repository dependency:go-offline
#   docker build . -t cool-app -f Dockerfile-2-build-bk --build-arg M2_MOUNT_TYPE=bind

ARG JAVA_VERSION=11
# M2_MOUNT_TYPE: Should be "cache" or "bind"
ARG M2_MOUNT_TYPE=${M2_MOUNT_TYPE:-cache}

FROM adoptopenjdk:${JAVA_VERSION}-jdk-hotspot AS build-with-m2-bind
WORKDIR /app
COPY .mvn .mvn
COPY mvnw mvnw
COPY pom.xml .
COPY src/ src/
RUN --mount=type=bind,source=./.m2/repository,target=/root/.m2/repository,rw ./mvnw clean package -DskipTests

FROM adoptopenjdk:${JAVA_VERSION}-jdk-hotspot AS build-with-m2-cache
WORKDIR /app
COPY .mvn .mvn
COPY mvnw mvnw
COPY pom.xml .
RUN --mount=type=cache,target=/root/.m2 ./mvnw dependency:go-offline
COPY src/ src/
RUN ./mvnw clean package -DskipTests

FROM build-with-m2-${M2_MOUNT_TYPE} AS build

FROM adoptopenjdk:${JAVA_VERSION}-jre-hotspot
WORKDIR /app
COPY --from=build /app/target/*.jar app.jar
USER 1002
ENTRYPOINT ["sh", "-c", "exec java ${JAVA_OPTS} -jar app.jar ${0} ${@}"]


############################################
## Alternative, using distroless base image:
## Sample command
##   docker run -p 8081:8081 -e "JAVA_TOOL_OPTIONS=-Ddebug -Xmx128m" cool-app /app.jar --server.port=8081
#
#FROM gcr.io/distroless/java:11
#WORKDIR /app
#COPY --from=build /app/target/*.jar app.jar
#USER nonroot
#CMD ["app.jar"]
############################################
