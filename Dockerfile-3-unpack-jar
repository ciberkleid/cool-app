# Sample command
#   docker run -p 8081:8081 -e "JAVA_OPTS=-Ddebug -Xmx128m" cool-app --server.port=8081

FROM adoptopenjdk:11-jdk-hotspot AS build
WORKDIR /app
COPY .mvn .mvn
COPY mvnw mvnw
# Copy pom.xml and install dependencies
COPY pom.xml .
RUN ./mvnw dependency:go-offline
# Copy source and build artifact
COPY src/ src/
RUN ./mvnw clean package -DskipTests
WORKDIR /app/target/dependency
RUN jar -xf ../*.jar

FROM adoptopenjdk:11-jre-hotspot
ARG DEPENDENCY=/app/target/dependency
COPY --from=build ${DEPENDENCY}/BOOT-INF/lib /app/lib
COPY --from=build ${DEPENDENCY}/META-INF /app/META-INF
COPY --from=build ${DEPENDENCY}/org /app/org
COPY --from=build ${DEPENDENCY}/BOOT-INF/classes /app
USER 1002
ENTRYPOINT ["sh", "-c", "exec java ${JAVA_OPTS} -cp app:app/lib/* org.springframework.boot.loader.JarLauncher ${0} ${@}"]

############################################
## Alternative, using distroless base image:
## Sample command
##   docker run -p 8081:8081 -e "JAVA_TOOL_OPTIONS=-Ddebug -Xmx128m" cool-app /app.jar --server.port=8081
#
#FROM gcr.io/distroless/java:11
#ARG DEPENDENCY=/app/target/dependency
#COPY --from=build ${DEPENDENCY}/BOOT-INF/lib /app/lib
#COPY --from=build ${DEPENDENCY}/META-INF /app/META-INF
#COPY --from=build ${DEPENDENCY}/org /app/org
#COPY --from=build ${DEPENDENCY}/BOOT-INF/classes /app
#USER nonroot
#ENTRYPOINT ["java", "-cp", "app:app/lib/*", "org.springframework.boot.loader.JarLauncher"]
############################################