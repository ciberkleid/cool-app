# syntax=docker/dockerfile:experimental

# Sample command
#   docker run -p 8081:8081 -e "JAVA_OPTS=-Ddebug -Xmx128m" cool-app --server.port=8081

ARG JAVA_VERSION=11

FROM adoptopenjdk:${JAVA_VERSION}-jdk-hotspot AS build
WORKDIR /app
COPY .mvn .mvn
COPY mvnw mvnw
COPY pom.xml .
COPY src/ src/
RUN --mount=type=bind,source=./.m2/repository,target=/root/.m2/repository,rw ./mvnw clean package -DskipTests
WORKDIR /app/target/dependency
RUN jar -xf ../*.jar

FROM adoptopenjdk:${JAVA_VERSION}-jre-hotspot
WORKDIR /app
ARG DEPENDENCY=/app/target/dependency
COPY --from=build ${DEPENDENCY}/BOOT-INF/lib lib
COPY --from=build ${DEPENDENCY}/META-INF META-INF
COPY --from=build ${DEPENDENCY}/org org
COPY --from=build ${DEPENDENCY}/BOOT-INF/classes .
USER 1002
ENTRYPOINT ["sh", "-c", "exec java ${JAVA_OPTS} -cp .:lib/* org.springframework.boot.loader.JarLauncher ${0} ${@}"]

############################################
## Alternative, using distroless base image:
## Sample command
##   docker run -p 8081:8081 -e "JAVA_TOOL_OPTIONS=-Ddebug -Xmx128m" cool-app /app.jar --server.port=8081
#
#FROM gcr.io/distroless/java:11
#WORKDIR /app
#ARG DEPENDENCY=/app/target/dependency
#COPY --from=build ${DEPENDENCY}/BOOT-INF/lib lib
#COPY --from=build ${DEPENDENCY}/META-INF META-INF
#COPY --from=build ${DEPENDENCY}/org org
#COPY --from=build ${DEPENDENCY}/BOOT-INF/classes .
#USER nonroot
#ENTRYPOINT ["java", "-cp", ".:lib/*", "org.springframework.boot.loader.JarLauncher"]
############################################